apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: redis-template
metadata:
  name: redis-template
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-password: '{.data[''REDIS_PASSWORD'']}'
    name: ${REDIS_SERVICE_NAME}
  stringData:
    REDIS_PASSWORD: ${REDIS_PASSWORD}
- apiVersion: v1
  kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${REDIS_SERVICE_NAME}
  spec:
    accessModes:
      - ReadWriteOnce 
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
    storageClassName: ${STORAGE_CLASS_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}
    name: ${REDIS_SERVICE_NAME}
  spec:
    ports:
    - name: redis
      nodePort: 0
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      name: ${REDIS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
      image.openshift.io/triggers: >-
        [{"from":{"kind":"ImageStreamTag","name":"redis:${REDIS_VERSION}","namespace":"${NAMESPACE}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"redis\")].image"}]
    name: ${REDIS_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: ${REDIS_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${REDIS_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: REDIS_PASSWORD
                name: ${REDIS_SERVICE_NAME}
          image: " "
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 6379
            timeoutSeconds: 1
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)" == "PONG"
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/redis/data
            name: ${REDIS_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${REDIS_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${REDIS_SERVICE_NAME}
  status: {}
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: REDIS_SERVICE_NAME
  required: true
  value: redis
- description: Password for the Redis connection user.
  displayName: Redis Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: REDIS_PASSWORD
  required: true
- description: Version of Redis image to be used (5-el7, 5-el8, 6-el7, 6-el8, or latest).
  displayName: Version of Redis Image
  name: REDIS_VERSION
  required: true
  value: latest
- description: The name of the StorageClass to use. 
  displayName: Storage Class Name
  name: STORAGE_CLASS_NAME
  required: true
  value: ocs-storagecluster-ceph-rbd
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift