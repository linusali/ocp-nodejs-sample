apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: pgsel-template
metadata:
  name: pgsql-template

objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''PG_DATABASE'']}'
      template.openshift.io/expose-password: '{.data[''PG_PASSWORD'']}'
      template.openshift.io/expose-username: '{.data[''PG_USER'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    PG_DATABASE: ${POSTGRESQL_DATABASE}
    PG_PASSWORD: ${POSTGRESQL_PASSWORD}
    PG_USER: ${POSTGRESQL_USER}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
      - ReadWriteOnce 
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
    storageClassName: ocs-storagecluster-ceph-rbd
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
      image.openshift.io/triggers: >-
        [{"from":{"kind":"ImageStreamTag","name":"postgresql:${POSTGRESQL_VERSION}","namespace":"${NAMESPACE}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"postgresql\")].image"}]
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 25%
        maxSurge: 25%
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: PG_USER
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: PG_PASSWORD
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: PG_DATABASE
                name: ${DATABASE_SERVICE_NAME}
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - '-c'
                  - >
                    #!/bin/bash

                    set -x 

                    export LOCAL_DB_IP=127.0.0.1

                    echo -e
                    "$LOCAL_DB_IP:5432:$POSTGRESQL_DATABASE:$POSTGRESQL_USER:$POSTGRESQL_PASSWORD"
                    > ~/.pgpass # Wait for PostgreSQL to be ready

                    chmod 700 ~/.pgpass

                    until pg_isready -h $LOCAL_DB_IP -p 5432 -U
                    $POSTGRESQL_USER ; do
                      echo "Waiting for PostgreSQL to be ready..."
                      sleep 2 
                    done


                    # Create the schema and insert sample data

                    psql -h $LOCAL_DB_IP -U $POSTGRESQL_USER -d
                    $POSTGRESQL_DATABASE -c "CREATE SCHEMA IF NOT EXISTS public;"

                    psql -h $LOCAL_DB_IP -U $POSTGRESQL_USER -d
                    $POSTGRESQL_DATABASE -c "CREATE TABLE IF NOT EXISTS
                    public.users (id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL);"

                    psql -h $LOCAL_DB_IP -U $POSTGRESQL_USER -d
                    $POSTGRESQL_DATABASE -c "INSERT INTO public.users
                    (name, email) 
                    VALUES('Alex Johnson', 'alex.johnson@example.com'),
                    ('Maria Rodriguez', 'maria.rodriguez@example.com'),
                    ('David Lee', 'david.lee@example.com'),
                    ('Sarah Patel', 'sarah.patel@example.com');"
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            initialDelaySeconds: 120
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${DATABASE_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
  status: {}
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 1024Mi
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: postgresql
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: sampledb
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Version of PostgreSQL image to be used (10-el7, 10-el8, or latest).
  displayName: Version of PostgreSQL Image
  name: POSTGRESQL_VERSION
  required: true
  value: latest
- description: The name of the StorageClass to use. 
  displayName: Storage Class Name
  name: STORAGE_CLASS_NAME
  required: true
  value: ocs-storagecluster-ceph-rbd
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
